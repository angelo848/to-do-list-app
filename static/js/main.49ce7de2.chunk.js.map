{"version":3,"sources":["styles/global.js","components/TodoList/styles.js","components/Task/styles.js","components/Task/index.js","components/TodoList/index.js","components/Sidebar/styles.js","components/Sidebar/index.js","components/Calendar/index.js","styles/App.js","App.js","index.js"],"names":["GlobalStyle","createGlobalStyle","Form","styled","form","List","ul","Input","input","Button","button","Todo","li","props","status","color","Task","item","name","favored","schedule","date","format","locale","pt","icon","faCheckCircle","faCircle","onClick","toggleTask","className","value","onChange","event","updateTask","target","index","faCalendar","toggleCalendar","favoredStar","faStar","favorTask","faTrashAlt","size","deleteTask","TodoList","tasks","useState","currentValue","setCurrentValue","colors","handleUpdateTask","editTask","handleDeleteTask","generateRandomColor","Math","floor","random","onSubmit","e","preventDefault","newTask","addTask","type","placeholder","map","task","idx","key","toggleStatus","toggleFavor","Container","div","Sidebar","sidebarOpen","setSidebarOpen","favoredTasks","filter","finishedTasks","scheduledTasks","filterTasks","faBars","faHome","length","faCheckDouble","Calendar","state","currentMonth","Date","selectedDate","onDateClick","day","setState","scheduleTask","indexTask","nextMonth","addMonths","prevMonth","subMonths","this","days","startDate","startOfWeek","i","push","addDays","monthStart","startOfMonth","monthEnd","endOfMonth","endDate","endOfWeek","rows","formattedDate","cloneDay","taskDay","schedules","isSameDay","isSameMonth","parseISO","renderHeader","renderDays","renderCells","Component","Title","h1","App","setTasks","filteredTasks","setFilteredTasks","renderizingFilteredTasks","setRenderizingFilteredTasks","calendar","setCalendar","editingTask","updatedTask","newTasks","favoredTask","scheduledTask","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.49ce7de2.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components'\n\nconst GlobalStyle = createGlobalStyle`\n  @import url('<link href=\"https://fonts.googleapis.com/css?family=Roboto:400,500&display=swap\" rel=\"stylesheet\">');\n  * {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n    outline: 0;\n  }\n\n  html, body {\n    font-family: 'Roboto', sans-serif;\n  }\n\n  .App {\n    display: inline-grid;\n    grid-template-columns: auto 1fr 1fr;\n    grid-template-rows: auto;\n    grid-template-areas: 'sidebar main calendar';\n    grid-gap: 30px;\n  }\n\n  .menu {\n    grid-area: sidebar\n  }\n\n  .todo {\n    grid-area: main;\n    min-width: 481px\n  }\n\n  .calendar {\n    grid-area: calendar;\n    height: fit-content;\n    margin-top: 30px\n  }\n`\n\nexport default GlobalStyle\n","import styled from 'styled-components'\n\nexport const Form = styled.form`\n  margin-bottom: 25px;\n`\n\nexport const List = styled.ul`\n  list-style: none;\n`\n\nexport const Input = styled.input`\n  padding: 10px;\n  width: 400px;\n  border-radius: 5px;\n  border: 1px solid #bababa;\n  margin-right: 20px;\n`\n\nexport const Button = styled.button`\n  padding: 7px;\n  border-radius: 5px;\n  border: 2px solid #2d98ad;\n  background-color: #2d98ad;\n  font-size: 15px;\n  color: #fff;\n  cursor: pointer;\n  transition: 0.25s background-color ease-in-out;\n  &:hover {\n    background-color: #6bbf59;\n    border-color: #6bbf59;\n  }\n`\n","import styled from 'styled-components'\n\nexport const Todo = styled.li`\n  width: 600px;\n  display: flex;\n  align-items: center;\n  background-color: ${props => (props.status ? '#6bbf59' : props.color)};\n  padding: 15px 15px;\n  margin-bottom: 10px;\n  border-radius: 5px;\n  text-decoration: ${props => (props.status ? 'line-through' : 'normal')};\n  input {\n    color: #fff;\n    font-size: 18px;\n    height: 34px;\n    background-color: inherit;\n    border: none;\n    border-color: #fffffc;\n    width: 100%;\n    cursor: pointer;\n    transition: 0.25s border-bottom ease-in-out;\n  }\n  input:focus {\n    border-bottom: 2px solid #fffffc;\n    cursor: text;\n  }\n  svg {\n    cursor: pointer;\n  }\n  & > svg {\n    margin-right: 30px;\n  }\n  div.wrapper {\n    display: flex;\n    justify-content: space-between;\n    width: 100%;\n    align-items: center;\n  }\n  div svg:first-child {\n    color: #fff;\n    margin-right: 15px;\n  }\n  div svg:nth-child(2) {\n    color: #ffad05;\n    margin-right: 15px;\n  }\n  div svg:last-child {\n    color: #ef5d60;\n  }\n  .info {\n    display: flex;\n    flex-flow: column;\n    width: 80%;\n    height: 34px;\n  }\n\n  .info span {\n    color: #fff;\n    font-size: 13px;\n  }\n`\n","import React from 'react'\nimport { format } from 'date-fns'\nimport pt from 'date-fns/locale/pt'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport {\n  faCircle,\n  faCheckCircle,\n  faTrashAlt,\n  faStar,\n  faCalendar\n} from '@fortawesome/free-regular-svg-icons'\nimport { faStar as favoredStar } from '@fortawesome/free-solid-svg-icons'\n\nimport { Todo } from './styles'\n\nexport default function Task(props) {\n  const { name, status, favored, color, schedule } = props.item\n  let date = ''\n\n  if (schedule !== '') {\n    date = format(schedule, 'eee, dd MMMM', {\n      locale: pt\n    })\n  }\n\n  return (\n    <Todo status={status} color={color}>\n      <FontAwesomeIcon\n        icon={status ? faCheckCircle : faCircle}\n        onClick={props.toggleTask}\n      />\n      <div className=\"wrapper\">\n        <div className=\"info\">\n          <input\n            value={name}\n            onChange={event =>\n              props.updateTask(event.target.value, props.index)\n            }\n          />\n          <span>{date}</span>\n        </div>\n        <div className=\"icon-wrapper\">\n          <FontAwesomeIcon\n            icon={faCalendar}\n            onClick={() => props.toggleCalendar(props.index)}\n          />\n          <FontAwesomeIcon\n            icon={favored ? favoredStar : faStar}\n            onClick={() => props.favorTask(props.index)}\n          />\n          <FontAwesomeIcon\n            icon={faTrashAlt}\n            size=\"lg\"\n            onClick={() => props.deleteTask(props.index)}\n          />\n        </div>\n      </div>\n    </Todo>\n  )\n}\n","import React, { useState } from 'react'\n\nimport { Form, List, Input, Button } from './styles'\nimport Task from '../Task'\n\nexport default function TodoList(props) {\n  const { tasks } = props\n  const [currentValue, setCurrentValue] = useState('')\n  const colors = [\n    '#4bc0d9',\n    '#3F334D',\n    '#6E9887',\n    '#C75146',\n    '#276FBF',\n    '#99E1D9',\n    '#AF5B5B',\n    '#21D19F',\n    '#A03E99',\n    '#394648'\n  ]\n\n  const addTask = e => {\n    e.preventDefault()\n\n    const newTask = currentValue\n    const color = generateRandomColor()\n\n    props.addTask(newTask, color)\n    setCurrentValue('')\n  }\n\n  const handleUpdateTask = (value, index) => {\n    props.editTask(value, index)\n  }\n\n  const handleDeleteTask = value => {\n    props.deleteTask(value)\n  }\n\n  const handleToggleStatus = index => {\n    props.toggleStatus(index)\n  }\n\n  const handleToggleFavor = index => {\n    props.toggleFavor(index)\n  }\n\n  const generateRandomColor = () => {\n    const cor = colors[Math.floor(Math.random() * 10)]\n\n    return cor\n  }\n\n  return (\n    <>\n      <Form onSubmit={addTask}>\n        <Input\n          type=\"text\"\n          name=\"todo\"\n          placeholder=\"Adicionar uma tarefa\"\n          value={currentValue}\n          onChange={e => setCurrentValue(e.target.value)}\n        />\n        <Button type=\"submit\">Salvar</Button>\n      </Form>\n      <List>\n        {tasks.map((task, idx) => (\n          <Task\n            key={idx}\n            item={task}\n            index={idx}\n            toggleTask={() => handleToggleStatus(idx)}\n            favorTask={() => handleToggleFavor(idx)}\n            updateTask={handleUpdateTask}\n            deleteTask={handleDeleteTask}\n            toggleCalendar={props.toggleCalendar}\n          />\n        ))}\n      </List>\n    </>\n  )\n}\n","import styled from 'styled-components'\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 200px;\n  height: 100vh;\n  margin-left: 0;\n  color: #f0f8ff;\n  background-color: #5f9ea0;\n  padding-top: 30px;\n  transition: width 180ms ease;\n  &.closed {\n    width: 50px;\n  }\n  &.closed span {\n    display: none;\n  }\n  svg {\n    cursor: pointer;\n    color: #f0f8ff;\n    margin-left: 18px;\n  }\n`\n\nexport const List = styled.ul`\n  margin-top: 30px;\n  list-style: none;\n  li {\n    display: flex;\n    justify-content: space-between;\n    cursor: pointer;\n    font-weight: 600;\n    padding: 10px 0;\n  }\n  li span:last-child {\n    margin-right: 20px;\n  }\n  li:hover {\n    background-color: #218084;\n  }\n  svg {\n    margin-right: 10px;\n  }\n`\n","import React, { useState } from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport {\n  faBars,\n  faHome,\n  faCheckDouble\n} from '@fortawesome/free-solid-svg-icons'\nimport { faStar, faCalendar } from '@fortawesome/free-regular-svg-icons'\n\nimport { Container, List } from './styles'\n\nexport default function Sidebar(props) {\n  const [sidebarOpen, setSidebarOpen] = useState(true)\n  const { tasks } = props\n  const favoredTasks = tasks.filter(task => task.favored === true)\n  const finishedTasks = tasks.filter(task => task.status === true)\n  const scheduledTasks = tasks.filter(task => task.schedule !== '')\n\n  const toggleSidebar = () => {\n    setSidebarOpen(!sidebarOpen)\n  }\n\n  const filterTasks = filter => {\n    if (filter === 'favored') {\n      props.filter(favoredTasks, filter)\n    } else if (filter === 'scheduled') {\n      props.filter(scheduledTasks, filter)\n    } else if (filter === 'finished') {\n      props.filter(finishedTasks, filter)\n    } else {\n      props.filter(false)\n    }\n  }\n\n  return (\n    <Container className={sidebarOpen ? 'open' : 'closed'}>\n      <FontAwesomeIcon icon={faBars} onClick={toggleSidebar} />\n      <List>\n        <li onClick={() => filterTasks('total')}>\n          <div>\n            <FontAwesomeIcon icon={faHome} />\n            <span>Tarefas</span>\n          </div>\n          <span>{tasks.length}</span>\n        </li>\n        <li onClick={() => filterTasks('favored')}>\n          <div>\n            <FontAwesomeIcon icon={faStar} />\n            <span>Importante</span>\n          </div>\n          <span>{favoredTasks.length}</span>\n        </li>\n        <li onClick={() => filterTasks('scheduled')}>\n          <div>\n            <FontAwesomeIcon icon={faCalendar} />\n            <span>Agendadas</span>\n          </div>\n          <span>{scheduledTasks.length}</span>\n        </li>\n        <li onClick={() => filterTasks('finished')}>\n          <div>\n            <FontAwesomeIcon icon={faCheckDouble} />\n            <span>Concluídas</span>\n          </div>\n          <span>{finishedTasks.length}</span>\n        </li>\n      </List>\n    </Container>\n  )\n}\n","import React, { Component } from 'react'\nimport {\n  format,\n  parseISO,\n  startOfMonth,\n  endOfMonth,\n  startOfWeek,\n  endOfWeek,\n  addMonths,\n  subMonths,\n  addDays,\n  isSameMonth,\n  isSameDay\n} from 'date-fns'\nimport pt from 'date-fns/locale/pt'\n\nimport './styles.css'\n\nexport default class Calendar extends Component {\n  state = {\n    currentMonth: new Date(),\n    selectedDate: new Date()\n  }\n\n  renderHeader() {\n    const dateFormat = 'MMMM yyyy'\n\n    return (\n      <div className=\"header row flex-middle\">\n        <div className=\"col col-start\">\n          <div className=\"icon\" onClick={this.prevMonth}>\n            chevron_left\n          </div>\n        </div>\n        <div className=\"col col-center\">\n          <span>\n            {format(this.state.currentMonth, dateFormat, { locale: pt })}\n          </span>\n        </div>\n        <div className=\"col col-end\">\n          <div className=\"icon\" onClick={this.nextMonth}>\n            chevron_right\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  renderDays() {\n    const dateFormat = 'EEEEEE'\n    const days = []\n\n    let startDate = startOfWeek(this.state.currentMonth)\n\n    for (let i = 0; i < 7; i++) {\n      days.push(\n        <div className=\"col col-center\" key={i}>\n          {format(addDays(startDate, i), dateFormat, { locale: pt })}\n        </div>\n      )\n    }\n\n    return <div className=\"days row\">{days}</div>\n  }\n\n  renderCells() {\n    const { currentMonth, selectedDate } = this.state\n    const monthStart = startOfMonth(currentMonth)\n    const monthEnd = endOfMonth(monthStart)\n    const startDate = startOfWeek(monthStart)\n    const endDate = endOfWeek(monthEnd)\n\n    const dateFormat = 'dd'\n    const rows = []\n\n    let days = []\n    let day = startDate\n    let formattedDate = ''\n\n    while (day <= endDate) {\n      for (let i = 0; i < 7; i++) {\n        let cloneDay = format(day, 'yyyy-MM-dd')\n        formattedDate = format(day, dateFormat)\n        let taskDay = day\n        var schedules = this.props.tasks\n          .filter(task => isSameDay(task.schedule, taskDay))\n          .map(task => task.schedule)\n        days.push(\n          <div\n            className={`col cell ${\n              !isSameMonth(day, monthStart)\n                ? 'disabled'\n                : isSameDay(day, selectedDate)\n                ? 'selected'\n                : isSameDay(day, schedules[0])\n                ? 'scheduled'\n                : ''\n            }`}\n            key={day}\n            onClick={() => this.onDateClick(parseISO(cloneDay))}\n          >\n            <span className=\"number\">{formattedDate}</span>\n            <span className=\"bg\">{formattedDate}</span>\n          </div>\n        )\n        day = addDays(day, 1)\n      }\n      rows.push(\n        <div className=\"row\" key={day}>\n          {days}\n        </div>\n      )\n      days = []\n    }\n\n    return <div className=\"body\">{rows}</div>\n  }\n\n  onDateClick = day => {\n    this.setState({ selectedDate: day })\n    this.props.scheduleTask(this.props.indexTask, day)\n  }\n\n  nextMonth = () => {\n    this.setState({\n      currentMonth: addMonths(this.state.currentMonth, 1)\n    })\n  }\n\n  prevMonth = () => {\n    this.setState({\n      currentMonth: subMonths(this.state.currentMonth, 1)\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"calendar\">\n        {this.renderHeader()}\n        {this.renderDays()}\n        {this.renderCells()}\n      </div>\n    )\n  }\n}\n","import styled from 'styled-components'\n\nexport const Title = styled.h1`\n  color: #4bc0d9;\n  margin-top: 30px;\n  margin-bottom: 20px;\n  font-size: 25px;\n`\n\nexport default Title\n","import React, { useState } from 'react'\n\nimport GlobalStyle from './styles/global'\nimport TodoList from './components/TodoList'\nimport Sidebar from './components/Sidebar'\nimport Calendar from './components/Calendar'\n\nimport { Title } from './styles/App'\n\nfunction App() {\n  const [tasks, setTasks] = useState([])\n  const [filteredTasks, setFilteredTasks] = useState([])\n  const [renderizingFilteredTasks, setRenderizingFilteredTasks] = useState(\n    false\n  )\n  const [calendar, setCalendar] = useState({})\n\n  const scheduledTasks = tasks.filter(task => task.schedule !== '')\n\n  const handleAddTask = (value, color) => {\n    setTasks([\n      ...tasks,\n      {\n        name: value,\n        color,\n        status: false,\n        favored: false,\n        schedule: ''\n      }\n    ])\n  }\n\n  const handleUpdateTask = (value, index) => {\n    let updatedTask = tasks[index]\n    updatedTask.name = value\n    const newTasks = tasks.filter((task, idx) =>\n      idx === index ? updatedTask : task\n    )\n\n    setTasks(newTasks)\n  }\n\n  const handleDeleteTask = value => {\n    const newTasks = tasks.filter((task, idx) => (idx !== value ? task : null))\n\n    setTasks(newTasks)\n  }\n\n  const handleToggleStatus = index => {\n    const updatedTask = tasks[index]\n\n    updatedTask.status\n      ? (updatedTask.status = false)\n      : (updatedTask.status = true)\n\n    const newTasks = tasks.filter((task, idx) =>\n      idx === index ? updatedTask : task\n    )\n\n    setTasks(newTasks)\n  }\n\n  const handleToggleFavor = index => {\n    const favoredTask = tasks[index]\n\n    favoredTask.favored\n      ? (favoredTask.favored = false)\n      : (favoredTask.favored = true)\n\n    const newTasks = tasks.filter((task, idx) =>\n      idx === index ? favoredTask : task\n    )\n\n    setTasks(newTasks)\n  }\n\n  const filterTasks = (filteredTasks, filter) => {\n    setFilteredTasks(filteredTasks)\n    setRenderizingFilteredTasks(filter)\n    if (filter === 'scheduled') {\n      toggleCalendar()\n    } else {\n      if (calendar.status !== false) {\n        toggleCalendar()\n      }\n    }\n  }\n\n  const toggleCalendar = index => {\n    setCalendar({\n      status: !calendar.status,\n      editingTask: index\n    })\n  }\n\n  const pickDate = (index, date) => {\n    const scheduledTask = tasks[index]\n\n    scheduledTask.schedule = date\n\n    const newTasks = tasks.filter((task, idx) =>\n      idx === index ? scheduledTask : task\n    )\n    setTasks(newTasks)\n    setCalendar({})\n  }\n\n  return (\n    <div className=\"App\">\n      <GlobalStyle />\n      <Sidebar className=\"menu\" tasks={tasks} filter={filterTasks} />\n      <div className=\"todo\">\n        <Title>Tarefas</Title>\n        <TodoList\n          tasks={renderizingFilteredTasks ? filteredTasks : tasks}\n          addTask={handleAddTask}\n          editTask={handleUpdateTask}\n          deleteTask={handleDeleteTask}\n          toggleStatus={handleToggleStatus}\n          toggleFavor={handleToggleFavor}\n          toggleCalendar={toggleCalendar}\n        />\n      </div>\n      {calendar.status && (\n        <Calendar\n          className=\"calendar\"\n          scheduleTask={pickDate}\n          indexTask={calendar.editingTask}\n          tasks={scheduledTasks}\n        />\n      )}\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}